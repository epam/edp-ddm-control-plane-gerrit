{{- $secretName := (printf "keycloak-client.%s-admin.secret" .Release.Namespace) }}

  {{- define "secret-value" }}
  {{- $secret := (lookup "v1" "Secret" .Release.Namespace (printf "keycloak-client.%s-admin.secret" .Release.Namespace)) }}
  {{- if $secret }}
  {{- $secret.data.clientSecret }}
  {{- else }}
  {{- uuidv4 | b64enc }}
  {{- end }}
  {{- end }}

  {{- $secretValue := include "secret-value" . }}

apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  annotations:
    "helm.sh/resource-policy": keep
type: Opaque
data:
  clientSecret: {{ $secretValue }}

---
apiVersion: v1.edp.epam.com/v1
kind: KeycloakRealmIdentityProvider
metadata:
  name: openshift-{{ .Release.Namespace }}
  annotations:
    helm.sh/resource-policy: keep
spec:
  realm: admin
  alias: openshift
  authenticateByDefault: false
  enabled: true
  firstBrokerLoginFlowAlias: "first broker login"
  providerId: keycloak-oidc
  displayName: "openshift-sso"
  config:
    clientId: "{{ .Release.Namespace }}-admin"
    clientSecret: {{ $secretValue | b64dec }}
    hideOnLoginPage: "false"
    syncMode: "FORCE"
    userInfoUrl: "{{ .Values.keycloak.url }}/realms/openshift/protocol/openid-connect/userinfo"
    tokenUrl: "{{ .Values.keycloak.url }}/realms/openshift/protocol/openid-connect/token"
    authorizationUrl: "{{ .Values.keycloak.url }}/realms/openshift/protocol/openid-connect/auth"
    logoutUrl: "{{ .Values.keycloak.url }}/realms/openshift/protocol/openid-connect/logout"
    clientAuthMethod: "client_secret_post"
  mappers:
    - name: "cp-registry-admin-{{ .Release.Namespace }}"
      config:
        external.role: "cp-registry-admin-{{ .Release.Namespace }}"
        syncMode: "FORCE"
        role: "cp-registry-admin-{{ .Release.Namespace }}"
      identityProviderAlias: "openshift"
      identityProviderMapper: "keycloak-oidc-role-to-role-idp-mapper"
